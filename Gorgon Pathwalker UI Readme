Gorgon Pathwalker UI Readme

To build and run Gorgon (Mac only):
1. Create a build folder, preferrably outside the Gorgon source folder (i.e. gorgon_build)
2. Use terminal to navigate (cd) to gorgon_build, and input into the terminal ccmake ../Gorgon. Here ../Gorgon is the path to the Gorgon source folder. 
  Press c to configure and then t to navigate the entries. Press enter to change these entries to the following as necessary:
  //Path to a file.
Boost_INCLUDE_DIR:PATH=/usr/local/include

//Boost library directory DEBUG
Boost_LIBRARY_DIR_DEBUG:PATH=/usr/local/lib

//Boost library directory RELEASE
Boost_LIBRARY_DIR_RELEASE:PATH=/usr/local/lib

//Boost python library (debug)
Boost_PYTHON_LIBRARY_DEBUG:FILEPATH=/usr/local/lib/libboost_python-mt.dylib

//Boost python library (release)
Boost_PYTHON_LIBRARY_RELEASE:FILEPATH=/usr/local/lib/libboost_python-mt.dylib
3. Still in the gorgon_build folder, type "make".
4. make Gorgon
5. cd run
6. python Gorgon.pyw. Gorgon should now be running.
For more on building on mac: 
https://github.com/GorgonCryoEM/Gorgon/wiki/Build
https://docs.google.com/document/d/11pp4mFVPjAHc7slHshXDqHThL9_Vnm4YpG9g5bX3aGk/edit?usp=sharing

In this branch of Gorgon, I have included CMakeCache.txt. These were my configurations for step 2.

_______________________________________________________________________________

To use Pathwalker:
1. Navigate to Gorgon/src_py/EMAN2/bin. Copy the LKH executable. This was not automatically copied over to the gorgon_build folder during building, but is needed as the travelling salesman algorithm. Navigate to gorgon_build/run/EMAN2/bin, and paste the executable.
2. python Gorgon.pyw to run Gorgon.
3. Use the top menu to navigate to Actions > C-Alpha Atoms > Pathwalker
4. The Pathwalker UI generally implements the steps from page 2 of the Gorgon Pathwalking tutorial: 
  http://blake.bcm.edu/emanwiki/Ws2015?action=AttachFile&do=get&target=PathwalkerGorgonTutorial.pdf
  The UI's default parameters follow those in the tutorial. To perform the first step (preprocessing), click Volume and navigate to
  your density map. For this instruction's purpose, sub-A.mrc, the test data from the tutorial, will be used. This file can be fownloaded from Data-Sets.zip at https://github.com/GorgonCryoEM/Gorgon/releases/tag/workshop-2015

  "Remove" moves a current processor to apply from the "Current Processors" list to the end of the "Available Processors" list. For now, this list includes all threshold and normalize processors from the EMAN2 processor manual: http://blake.bcm.edu/eman2/processors.html
  "Add" moves a processor from the "Available Processors" list to the end of the "Current Processors" list. "Clear" moves all current processors to the "Available Processors" list.

  Clicking "Preprocess" will perform step 1 from the tutorial using the processors as desired. After preprocessing, the density map will be displayed, and the volume visualization 

5. Next is generating pseudoatoms. Using the bottom right tabs, navigate back to the Pathwalker UI. Switch to "pseudoatom generation" within the pathwalker ui tabs. The processor lists are akin to the preprocessing tab, though the default current processors is segment.kmeans and segment.distance is added as an available processor.
The segments, amplitude weight, threshold, and segment separation inputs correspond to the nseg, ampweight, thr, and minsegsep parameters for e2segment3d.py. Clicking "Generate PseudoAtoms" will use the processor (k-means algorithm by default) to predict pseudo-atom locations. You may view the terminal to view the progress - the tutorial data will require 52 iterations. After loading in the atoms, the C-Alpha Visualization panel will appear.

After pseudoatoms have been generated, pseudoatoms can be removed using shift + left click on the atoms. To modify an atom's location on screen, left click to select the atom, then command + right click drag as desired. These can also be done after the next pathwalking step.

6. Next is the pathwalking. Using the bottom right tabs, navigate back to the Pathwalker UI. Switch to "pathwalk" within the pathwalker ui tabs. "Minimum Distance ", "Maximum Distance", "Map Threshold", and "Map Weight" correspond to the dmin, dmax, mapthresh, and mapweight parameters for e2pathwalker.py.

Prevent edges prohibits a connection from being made between two particular pseudo-atoms in the path generated by pathwalking. Select two atoms, then press "Prevent selected edge" to add to the constraint list. The list will display the id's of the two atoms and the distance between them in Angstroms. To remove from the list, select the row and press "Remove from list". "Clear list" removes all items. "Display removed edges" visualizes / highlights the edges to be prevented on screen. 

Force edges is analogous to prevent edges, except that the path must have a direct connection between atoms for all pairs in the list. To the N-Terminus (start of path), select one atom and click "Set n-terminus as selected". "Reset" removes the termini constraint. Same for C-Terminus (end of path).

The edge and termini constraints can be enforced pre- or post- pathwalking.

Click Pathwalk. This process may take a few minutes. Progress can be viewed from the terminal - this will take 10 iterations.

After the process is complete, the path will load and the C-Alpha Visualization panel will appear.

7. Next is Helix and Beta Strand generation. Using the bottom right tabs, navigate back to the Pathwalker UI. Switch to "Helices and Sheets" within the pathwalker ui tabs. 

Under Helices, the density threshold, minimum length, length threshold, and bond angle threshold correspond to the denthr, minlen, lenthr, and angthr parameters for e2pwhelixfit.py. Click "Find and Regularize Helices". This will take a few seconds, after which the path will reload onto the screen. The C-Alpha Visualization panel will appear. Toggle the alpha helices check box to view all generated helices.

Under Strands, max sheet strains, minimum length, and sheet score threshold correspond to the nsht, minlen, and cutoff parameters for e2pwsheetfit.py.